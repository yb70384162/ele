1、fastclick
 原理: 在检测到touchend事件的时候，会通过DOM自定义事件立即出发模拟一个click事件，并把浏览器在300ms之后真正的click事件阻止掉
缺点: 脚本相对较大
在vue中使用???
?```js? ??// 安装? ?
 npm install fastclick -S? ? // 引入? ? 
import FastClick from 'fastclick'? ? // 使用? ? FastClick.attach(document.body);? ? ```
2、js刷新页面location.reload()用法
注意：
window.location.reload;
刷新时如果提交数据的动作，则会出现对话框！
解决
代码示例:
window.location.href=window.location.href; 
window.location.reload;
router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：在APP.js中，
https://www.jianshu.com/p/0b0222954483
// routes 配置
export default [
  {
    path: '/',
    name: 'home',
    component: Home,
    meta: {
      keepAlive: true // 需要被缓存
    }
  }, {
    path: '/:id',
    name: 'edit',
    component: Edit,
    meta: {
      keepAlive: false // 不需要被缓存
    }
  }
]
3.Ajax请求中的async:false/true的作用
async. 默认是true，即为异步方式，$.Ajax执行后，会继续执行ajax后面的脚本，直到服务器端返回数据后，触发$.Ajax里的success方法，这时候执行的是两个线程。若要将其设置为false，则所有的请求均为同步请求，在没有返回值之前，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。
var temp;
  $.ajax({
  
     async: false,
     type : "POST",
     url : defaultPostData.url,
     dataType : 'json',
     success : function(data) 
     {
 
      temp=data; 
   }
 
 });
 
alert(temp);
这个ajax请求为同步请求，在没有返回值之前，alert(temp)是不会执行的。

如果async设置为：true，则不会等待ajax请求返回的结果，会直接执行ajax后面的语句

4、讲讲vue路由懒加载
const tvProgram = resolve => require(['路由'], resolve);
require-ensure和require-amd的区别：     
require-amd?
说明: 同AMD规范的require函数，使用时传递一个模块数组和回调函数，模块都被下载下来且都被执行后才执行回调函数
语法:?require(dependencies: String[], [callback: function(...)])
参数?
dependencies: 模块依赖数组
callback: 回调函数

require-ensure?
说明: require.ensure在需要的时候才下载依赖的模块，当参数指定的模块都下载下来了（下载下来的模块还没执行），便执行参数指定的回调函数。require.ensure会创建一个chunk，且可以指定该chunk的名称，如果这个chunk名已经存在了，则将本次依赖的模块合并到已经存在的chunk中，最后这个chunk在webpack构建的时候会单独生成一个文件。
语法:?require.ensure(dependencies: String[], callback: function([require]), [chunkName: String])?
dependencies: 依赖的模块数组
callback: 回调函数，该函数调用时会传一个require参数
chunkName: 模块名，用于构建时生成文件时命名使用
注意点：requi.ensure的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。
--------------------- 
5、mixins混合对象的使用

对mixins的理解，有点像注册了一个vue的公共方法，可以绑定在多个组件或者多个Vue对象实例中使用。另一点，类似于在原型对象中注册方法，实例对象即组件或者Vue实例对象中，仍然可以定义相同函数名的方法进行覆盖，有点像子类和父类的感觉。下面主要参考网上的一些资料，对mixins的实际作用做介绍：


1、方法的复用

<div id="app">

    <child></child>

    <kid></kid>

</div>


Vue.component('child',{

    template:`<h1 @click="foo">child component</h1>`,
          methods:{

        foo(){

            console.log('Child foo()'+this.msg++)
       
      }

    }

})
 

Vue.component('kid',{

    template:`<h1 @click="foo">kid component</h1>`,
    methods:{

        foo(){

            console.log('Kid foo()'+this.msg++)

        }

    }

})

在借助mixins之前，在两个不同的组件的组件中调用foo方法，需要重复定义，倘若方法比较复杂，代码将更加冗余。若借助mixins，则变得十分简单：


let mixin={

    data(){

        return{

            msg:1

        }

    },

    methods:{

        hello(){

            console.log('hello from mixin!----'+this.msg++)
        }

    }

}

var child=Vue.component('child',{
 
        template:`<h1 @click="foo">child component</h1>`, 
        mixins:[mixin]
})
Vue.component('kid',{
 
        template:`<h1 @click="foo">kid component</h1>`, 
        mixins:[mixin]
})

虽然此处，两个组件用可以通过this.msg引用mixins中定义的msg，但是，小编尝试过，两个组件引用的并不是同一个msg，而是各自创建了一个新的msg。如果在组件中定义相同的data，则此处会引用组件中的msg，而非mixins中的。




2、方法的覆盖 ?
如果在引用mixins的同时，在组件中重复定义相同的方法，则mixins中的方法会被覆盖。


var child=Vue.component('child',{

    template:`<h1 @click="foo">child component</h1>`,
    mixins:[mixin],

    methods:{

        foo(){

            console.log('Child foo()'+this.msg++)

        }

    }

})

此时，若单击h1标签，则在控制台中打印"Child foo() 1" 3、合并生命周期此时，若单击h1标签，则在控制台中打印"Child foo() 1"?


3、合并生命周期

let mixin={

    mounted(){

        console.log('mixin say hi')//先输出

    },

    data(){

        return{

            msg:1

        }

    },

    methods:{

        foo(){

            console.log('mixin foo()'+this.msg++)

        }

    }

}

let vm=new Vue({

    el:"#app",

    data:{

        msg: 2

    },
    
mounted: function(){

        console.log('app say hi')//后输出

    },

    methods:{

        foo(){

            console.log('Parent foo()'+this.msg)

        }

    }
})

--------------------- 
6、Vue中的nextTick
链接地址https://www.jianshu.com/p/a7550c0e164f
项目中在商品与评论切换处用到
Vue中的nextTick涉及到Vue中DOM的异步更新，感觉很有意思，特意了解了一下。其中关于nextTick的源码涉及到不少知识，很多不太理解，暂且根据自己的一些感悟介绍下nextTick。
一、示例
先来一个示例了解下关于Vue中的DOM更新以及nextTick的作用。
模板

<div class="app">

  <div ref="msgDiv">{{msg}}</div>

  <div v-if="msg1">Message got outside $nextTick: {{msg1}}</div>

  <div v-if="msg2">Message got inside $nextTick: {{msg2}}</div>

  <div v-if="msg3">Message got outside $nextTick: {{msg3}}</div>

  <button @click="changeMsg">

    Change the Message

  </button>

</div>


Vue实例
new Vue({

  el: '.app',

  data: {

    msg: 'Hello Vue.',

    msg1: '',

    msg2: '',

    msg3: ''
 
 },
  methods: {

    changeMsg() {

      this.msg = "Hello world."

      this.msg1 = this.$refs.msgDiv.innerHTML

      this.$nextTick(() => {

        this.msg2 = this.$refs.msgDiv.innerHTML

      })

      this.msg3 = this.$refs.msgDiv.innerHTML

    }

  }

})


点击前







点击后







从图中可以得知：msg1和msg3显示的内容还是变换之前的，而msg2显示的内容是变换之后的。其根本原因是因为Vue中DOM更新是异步的（详细解释在后面）。
二、应用场景

下面了解下nextTick的主要应用的场景及原因。


在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中

在created()钩子函数执行的时候DOM
 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。
与之对应的就是mounted()钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。


在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中。

具体原因在Vue的官方文档中详细解释：


Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。
如果同一个 watcher 被多次触发，只会被推入到队列中一次。
这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。
然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。
Vue 在内部尝试对异步队列使用原生的 Promise.then 和MessageChannel，如果执行环境不支持，会采用 setTimeout(fn, 0)代替。



例如，当你设置vm.someData = 'new value'，该组件不会立即重新渲染。
当刷新队列时，组件会在事件循环队列清空时的下一个“tick”更新。多数情况我们不需要关心这个过程，但是如果你想在 DOM 状态更新后做点什么，这就可能会有些棘手。
虽然 Vue.js 通常鼓励开发人员沿着“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们确实要这么做。
为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用Vue.nextTick(callback) 。
这样回调函数在 DOM 更新完成后就会调用。


----------------
7、NodeJs/Vue项目中对process.env的使用
NODE_ENV获取环境变量

let env = app.get('env')

let env = process.env.NODE_ENV

//默认 NODE_ENV 为环境变量名称

//可自行在 process.env 对象下定义需要使用的变量,在项目中可以根据
//不同的 env 值设置 defaultUrl 
在webpack 打包的项目/Node JS项目中，可以安装 cross-env(跨Win/Linux平台设置 process.env值) 插件，在 package.json 文件中
设置不同的运行脚本，比如：
script:{
    "start": "node build/dev-server.js",
    "buildStag": "cross-env cross-env NODE_ENV=stag  node build/dev-server.js",
    "buildProd": "cross-env cross-env NODE_ENV=production  node build/dev-server.js",
}
//根据上述脚本即可设置不同的 NODE_ENV 值，在文件中设置值或者加载不同的设置文件，以上配置在NODE项目中可正常运行

Vue项目中使用
在使用Vue Cli构建的项目中，
需要将process.env 设置其他变量名进行使用，如：BUILD_ENV
在 package.json 的 script 字段中作如下配置：

 "scripts": {
    "start": "cross-env BUILD_ENV=dev node build/dev-server.js",
    "dev": "cross-env BUILD_ENV=dev  node build/dev-server.js",
    "build": "cross-env BUILD_ENV=dev node build/build.js",
    "buildDev": "cross-env BUILD_ENV=dev  node build/build.js",
    "buildStag": "cross-env BUILD_ENV=stag  node build/build.js",
    "buildProd": "cross-env BUILD_ENV=prod  node build/build.js",
    "unit": "cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run",
    "e2e": "node test/e2e/runner.js",
    "test": "npm run unit && npm run e2e",
    "lint": "eslint --ext .js,.vue src test/unit/specs test/e2e/specs"
  },

由于搭配webpack重新设置了 process.env 的值，需要在
webpack.dev.conf.js 及 webpack.prod.conf.js 文件中：
webpack.dev.conf.js

new webpack.DefinePlugin({
    'process.env': config.dev.env,
    'process.env.BUILD_ENV': JSON.stringify(process.env.BUILD_ENV)//增加此行
})

webpack.prod.conf.js
new webpack.DefinePlugin({
    'process.env': env,
    'process.env.BUILD_ENV': JSON.stringify(process.env.BUILD_ENV)
})
即在该插件设置并暴露出 process.env 对象后，再增加
process.env.BUILD_ENV 字段并进行赋值

此时，可在前端JS文件中通过 process.env.BUILD_ENV 获得 package.json中的script获得对应值，进行其他操作，
比如，引入不同环境的配置文件，如：
在config文件夹中增加 buildConfig 文件夹，
其中新建以下3个文件：

dev.config.js 
stag.config.js 
prod.config.js,

在每个文件中采用module.exports的方式导出变量，
如：

module.exports = {

    BASE_URL: 'https://dev-api.greigreat.com',
        BASE_STATIC_URL:'https://static1.greigreat.com/'

}


在其他文件中使用

//引入环境配置文件

//process.env.BUILD_ENV 为 webpack中的DefinePlugin暴露出的环境变量

const buildConfig = require('./buildConfig/' + process.env.BUILD_ENV + '.config')

export default {

    baseUrl: buildConfig.BASE_URL,

    baseStaticUrl: buildConfig.BASE_STATIC_URL

}


则可以以对象的形式获取 buildConfig并使用


-------------------
8、vue路由嵌套，配置children嵌套路由
嵌套路由就是路由里面嵌套他的子路由，可以有自己的路由导航和路由容器（router-link、router-view），通过配置children可实现多层嵌套


//mine组件

<template>

    <div class="content">

        在mine的组件里面嵌套路由

        <router-link to="/mine/c">去到Cpage</router-link>

        <router-link to="/mine/d">去到Dpage</router-link>

        <div class="child">

            <router-view></router-view>

        </div>

    </div>

</template>
//router.js

//引入需要的组件，下是我的路径

import Vue from 'vue'

import Router from 'vue-router'

import Home from '@/components/home'

import Mine from '@/components/mine'

import Cpage from '@/page/mine/c'

import Dpage from '@/page/mine/d'

Vue.use(Router)


export default new Router({

  routes: [

    {
   
        path: '/',

        redirect: 'home'

    },

    {

      path: '/home',

      name: 'home',

      component: Home

    },

    {

      path: '/mine',

      name: 'Mine',

      component：Mine,

      children:[

        {

            path:'/',

            component:Cpage,

        },

        {

            path:'/mine/c',

            component:Cpage,

        },

        {

            path:'/mine/d',

            component:Dpage,

        }

      ]

      //children这是嵌套的部分

    },


//c.vue
<template>

    <div class="top-80">

        c.vue

        <p>这里Cpage文件</p>

    </div>
</template>


//d.vue
<template>

    <div class="top-80">

        d.vue

        <p>这里Dpage文件</p>

    </div>

</template>



嵌套路由通过配置children可实现多层嵌套，其它规则写法一样；
--------------------- 
9、go back与return有什么区别			
go back回去,回到某一个地方			
return是从A地到B地,然后强调了又从B地回到A地			
而且return还有一个用法就是指借了东西,归还回去

10、Fetch		
Fetch获取数据	
假设我们想通过GitHub获取一个仓库，我们可以像下面这样使用：
	  
fetch('https://api.github.com/users/chriscoyier/repos');
			
Fetch会返回Promise，所以在获取资源后，可以使用.then方法做你想做的。	  
fetch('https://api.github.com/users/chriscoyier/repos')	  
 .then(response => {/* do something */})
Github返回的响应是J
SON格式的，所以调用response.json方法来转换数据。还有其他方法来处理不同类型的响应。如果请求一个XML格式文件，则调用response.text。如果请求图片，使用response.blob方法
	列如：	
fetch('https://api.github.com/users/chriscoyier/repos')
  						
.then(response => response.json())
  						
.then(data => {					 
// data就是我们请求的repos
   						 
console.log(data)  						
});
Fetch发送数据
使用Fetch发送也很简单，只需要配置三个参数。  
第一个参数是设置请求方法（如post、put或del），Fetch会自动设置方法为get。   
第二个参数是设置头部。因为一般使用JSON数据格式，所以设置ContentType为application/json。  
第三个参数是设置包含JSON内容的主体。因为JSON内容是必须的，所以当设置主体时会调用JSON.stringify。
列如：
let content = {some: 'content'};
   // The actual fetch request
	fetch('some-url', {
  	method: 'post',
  	headers: {
    	'Content-Type': 'application/json'
  					},
  body: JSON.stringify(content)
	})
// .then()...
---------------------------
11、vue  init的方法使用  数据绑定实现逻辑
Vue 实例在建立的时候会运行一系列的初始化操作，而在这些初始化操作里面，和数据绑定关联最大的是 initState。这个里面要说的也是比较多，有可能这次的文章里面写不全，先写这看吧。

首先看 initState
export function initState (vm: Component) {
  vm._watchers = []
  const opts = vm.$options
  if (opts.props) initProps(vm, opts.props)
  if (opts.methods) initMethods(vm, opts.methods)
  if (opts.data) {
    initData(vm)
  } else {
    observe(vm._data = {}, true /* asRootData */)
  }
  if (opts.computed) initComputed(vm, opts.computed)
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch)
  }
}
这里面主要是对 props, methods, data, computed 和 watch 进行初始化（如果还不知道这几个属性都是什么，建议先去看一下官方文档并且写几个小例子）。这些属性都是要在 Dom 渲染时获取的，自然也大都需要进行数据绑定。

initProps
function initProps (vm: Component, propsOptions: Object) {
  const propsData = vm.$options.propsData || {}
  const props = vm._props = {}
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  const keys = vm.$options._propKeys = []
  const isRoot = !vm.$parent
  // root instance props should be converted
  observerState.shouldConvert = isRoot
  for (const key in propsOptions) {
    keys.push(key)
    const value = validateProp(key, propsOptions, propsData, vm)
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      ......
    } else {
      defineReactive(props, key, value)
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, `_props`, key)
    }
  }
  observerState.shouldConvert = true
}
省略的地方是开发环境中为了方便调试写的代码，Vue 源码中有相当多的地方是这样写的。

整体逻辑就是：

把所有 prop 的 key 另存在 options 的 _propKeys 中。

对于每一个 prop，将其 key 添加到 _propKeys 中，获取其 value，并执行 defineReactive 函数。
（不了解的可以看上一节）
对于每一个 prop, 调用 proxy 函数在 Vue 对象上建立一个该值的引用。

在获取 prop 的 value 的时候调用了 validateProp 进行验证并取验证后的返回值。
export function validateProp (
  key: string,
  propOptions: Object,
  propsData: Object,
  vm?: Component
): any {
  const prop = propOptions[key]
  const absent = !hasOwn(propsData, key)
  let value = propsData[key]
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key)
    // since the default value is a fresh copy,
    // make sure to observe it.
    const prevShouldConvert = observerState.shouldConvert
    observerState.shouldConvert = true
    observe(value)
    observerState.shouldConvert = prevShouldConvert
  }
  if (
    process.env.NODE_ENV !== 'production' &&
    // skip validation for weex recycle-list child component props
    !(__WEEX__ && isObject(value) && ('@binding' in value))
  ) {
    assertProp(prop, key, value, vm, absent)
  }
  return value
}
注意，prop 验证只有在开发环境中才会进行，并且并不会影响渲染，只会发出警告。

这里的工作主要是在 prop 没有传值时获取 prop 的默认值（默认值是自己设置的），并对该值执行 observe。对于布尔类型，如果没有默认值则认为默认值是 false。

如果是开发环境，则会进行类型验证，这个验证是典型的根据构造函数名进行类型验证的，这个函数名获取到以后会进行字符串的比对，最近也正想自己写一个比较完善的类型验证组件，所以在这篇文章里就不详述了，免得跑题。

这里多次对 observerState.shouldConvert 进行赋值，这个值的 true or false 直接决定了 Observer 是否会建立。

至于这个 propsData 是什么时候取得的呢，当然是在模板编译的时候取得的。关于 prop 还有很多需要说的，有可能还要另外写一篇文章来说明。

initMethod

对 method 的初始化相对其他来说还是比较简单的
function initMethods (vm: Component, methods: Object) {
  const props = vm.$options.props
  for (const key in methods) {
    if (process.env.NODE_ENV !== 'production') {
      if (methods[key] == null) {
        warn(
          `Method "${key}" has an undefined value in the component definition. ` +
          `Did you reference the function correctly?`,
          vm
        )
      }
      if (props && hasOwn(props, key)) {
        warn(
          `Method "${key}" has already been defined as a prop.`,
          vm
        )
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          `Method "${key}" conflicts with an existing Vue instance method. ` +
          `Avoid defining component methods that start with _ or $.`
        )
      }
    }
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm)
  }
}
主要是在开发环境中检测：

方法名是否为空
方法名是否和一个 prop 冲突
方法名是否和已有的 Vue 实例方法冲突
另外会用 bind 将该方法的作用域绑定到 Vue 实例对象上，且创建一个在 Vue 实例对象上的引用（这点很重要）
export function bind (fn: Function, ctx: Object): Function {
  function boundFn (a) {
    const l: number = arguments.length
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }
  // record original fn length
  boundFn._length = fn.length
  return boundFn
}
这个 bind 是用apply 和 call 重写的 bind，据说是会比原生的 bind 要快，但是实在才学尚浅，不明白为什么。
initData
如果对上篇文章说到的内容比较熟悉的话，这里应该就没什么难度了。

function initData (vm: Component) {
  let data = vm.$options.data
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {}
  if (!isPlainObject(data)) {
    data = {}
    process.env.NODE_ENV !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    )
  }
  // proxy data on instance
  const keys = Object.keys(data)
  const props = vm.$options.props
  const methods = vm.$options.methods
  let i = keys.length
  while (i--) {
    const key = keys[i]
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn(
          `Method "${key}" has already been defined as a data property.`,
          vm
        )
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn(
        `The data property "${key}" is already declared as a prop. ` +
        `Use prop default value instead.`,
        vm
      )
    } else if (!isReserved(key)) {
      proxy(vm, `_data`, key)
    }
  }
  // observe data
  observe(data, true /* asRootData */)
}


首先会获取 data，如果 data 是函数的话，则调用 getData 获取函数的返回值。
这里面还是在检测一些重名的问题，就不想细说了。
这里最重要的是对 data 运行 observe 函数建立起 Observer 和钩子函数


initComputed
这里就比较麻烦了，由于计算属性并不是值，而是函数，并且返回值还会和一些值有关，同时还要涉及到缓存的问题，就需要一些特殊的方法进行处理了，为了避免文章太长，就放在下一篇说。
initWatch
说到这里就一定要补充一下之前没有说到的关于 Watcher 的问题了，先看代码，一步步往下说。
function initWatch (vm: Component, watch: Object) {
  for (const key in watch) {
    const handler = watch[key]
    if (Array.isArray(handler)) {
      for (let i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i])
      }
    } else {
      createWatcher(vm, key, handler)
    }
  }
}
首先是对于每一个 watch 属性运行 createWatcher（想想也应该知道是建立一个 Watcher 对象）
function createWatcher (
  vm: Component,
  keyOrFn: string | Function,
  handler: any,
  options?: Object
) {
  if (isPlainObject(handler)) {
    options = handler
    handler = handler.handler
  }
  if (typeof handler === 'string') {
    handler = vm[handler]
  }
  return vm.$watch(keyOrFn, handler, options)
}
这里主要进行了两步预处理，代码上很好理解，主要做一些解释：
第一步，可以理解为用户设置的 watch 有可能是一个 options 对象，如果是这样的话则取 options 中的 handler 作为回调函数。（并且将options 传入下一步的 vm.$watch）
第二步，watch 有可能是之前定义过的 method，则获取该方法为 handler。
下面就要看 $watch 方法了，这个方法是在 stateMixin 中定义的


Vue.prototype.$watch = function (
    expOrFn: string | Function,
    cb: any,
    options?: Object
  ): Function {
    const vm: Component = this
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {}
    options.user = true
    const watcher = new Watcher(vm, expOrFn, cb, options)
    if (options.immediate) {
      cb.call(vm, watcher.value)
    }
    return function unwatchFn () {
      watcher.teardown()
    }
  }
这里的逻辑是，如果 cb（就是前面的 handler）是对象的话则再运行一遍 createWatcher 进行处理，然后建立一个 Watcher 对象进行监听，如果 options 中的 immediate 为 true 则立即执行该回调函数，最后返回一个函数用来停止监听。
接下来就要看看这个回调函数是什么时候运行的了


run () {
    if (this.active) {
      const value = this.get()
      if (
        value !== this.value ||
        // Deep watchers and watchers on Object/Arrays should fire even
        // when the value is the same, because the value may
        // have mutated.
        isObject(value) ||
        this.deep
      ) {
        // set new value
        const oldValue = this.value
        this.value = value
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue)
          } catch (e) {
            handleError(e, this.vm, `callback for watcher "${this.expression}"`)
          }
        } else {
          this.cb.call(this.vm, value, oldValue)
        }
      }
    }
  }
再次看到 Watcher 的 run 方法，这里面判断 user 如果为 true 则运行 cb 函数，这个函数就是之前传入的 handler 回调函数， user 则在 vm.$watch 中赋值为true，其他地方建立的 Watcher 则基本都为 false，其他的几个如 lasy 等参数也是通过 options 传入的，这里就不详细说了，具体可以自己看一下代码或者官方API文档。
结语
到这一步为止（先不算计算属性的初始化），数据绑定的逻辑基本分析完了，这篇文章看完以后重点还是要看看 Watcher 对象的设计，可以说这个监视器设计的相当巧妙，废话不多说了，希望大家有什么见解或者分析有误的可以提出来。