1、fastclick
 原理: 在检测到touchend事件的时候，会通过DOM自定义事件立即出发模拟一个click事件，并把浏览器在300ms之后真正的click事件阻止掉
缺点: 脚本相对较大
在vue中使用???
?```js? ??// 安装? ?
 npm install fastclick -S? ? // 引入? ? 
import FastClick from 'fastclick'? ? // 使用? ? FastClick.attach(document.body);? ? ```
2、js刷新页面location.reload()用法
注意：
window.location.reload;
刷新时如果提交数据的动作，则会出现对话框！
解决
代码示例:
window.location.href=window.location.href; 
window.location.reload;
router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：在APP.js中，
https://www.jianshu.com/p/0b0222954483
// routes 配置
export default [
  {
    path: '/',
    name: 'home',
    component: Home,
    meta: {
      keepAlive: true // 需要被缓存
    }
  }, {
    path: '/:id',
    name: 'edit',
    component: Edit,
    meta: {
      keepAlive: false // 不需要被缓存
    }
  }
]
3.Ajax请求中的async:false/true的作用
async. 默认是true，即为异步方式，$.Ajax执行后，会继续执行ajax后面的脚本，直到服务器端返回数据后，触发$.Ajax里的success方法，这时候执行的是两个线程。若要将其设置为false，则所有的请求均为同步请求，在没有返回值之前，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。
var temp;
  $.ajax({
  
     async: false,
     type : "POST",
     url : defaultPostData.url,
     dataType : 'json',
     success : function(data) 
     {
 
      temp=data; 
   }
 
 });
 
alert(temp);
这个ajax请求为同步请求，在没有返回值之前，alert(temp)是不会执行的。

如果async设置为：true，则不会等待ajax请求返回的结果，会直接执行ajax后面的语句